// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import backend "github.com/opensds/multi-cloud/backend/proto"
import client "github.com/micro/go-micro/client"
import context "context"
import mock "github.com/stretchr/testify/mock"

// BackendService is an autogenerated mock type for the BackendService type
type BackendService struct {
	mock.Mock
}

// CreateBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) CreateBackend(ctx context.Context, in *backend.CreateBackendRequest, opts ...client.CallOption) (*backend.CreateBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *backend.CreateBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *backend.CreateBackendRequest, ...client.CallOption) *backend.CreateBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.CreateBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *backend.CreateBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) DeleteBackend(ctx context.Context, in *backend.DeleteBackendRequest, opts ...client.CallOption) (*backend.DeleteBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *backend.DeleteBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *backend.DeleteBackendRequest, ...client.CallOption) *backend.DeleteBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.DeleteBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *backend.DeleteBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) GetBackend(ctx context.Context, in *backend.GetBackendRequest, opts ...client.CallOption) (*backend.GetBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *backend.GetBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *backend.GetBackendRequest, ...client.CallOption) *backend.GetBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.GetBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *backend.GetBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) ListBackend(ctx context.Context, in *backend.ListBackendRequest, opts ...client.CallOption) (*backend.ListBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *backend.ListBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *backend.ListBackendRequest, ...client.CallOption) *backend.ListBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.ListBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *backend.ListBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListType provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) ListType(ctx context.Context, in *backend.ListTypeRequest, opts ...client.CallOption) (*backend.ListTypeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *backend.ListTypeResponse
	if rf, ok := ret.Get(0).(func(context.Context, *backend.ListTypeRequest, ...client.CallOption) *backend.ListTypeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.ListTypeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *backend.ListTypeRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBackend provides a mock function with given fields: ctx, in, opts
func (_m *BackendService) UpdateBackend(ctx context.Context, in *backend.UpdateBackendRequest, opts ...client.CallOption) (*backend.UpdateBackendResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *backend.UpdateBackendResponse
	if rf, ok := ret.Get(0).(func(context.Context, *backend.UpdateBackendRequest, ...client.CallOption) *backend.UpdateBackendResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backend.UpdateBackendResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *backend.UpdateBackendRequest, ...client.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
