// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import _exception "github.com/opensds/multi-cloud/s3/pkg/exception"

import mock "github.com/stretchr/testify/mock"
import s3 "github.com/opensds/multi-cloud/s3/proto"
import utils "github.com/opensds/multi-cloud/s3/pkg/utils"

// DBAdapter is an autogenerated mock type for the DBAdapter type
type DBAdapter struct {
	mock.Mock
}

// AddMultipartUpload provides a mock function with given fields: record
func (_m *DBAdapter) AddMultipartUpload(record *s3.MultipartUploadRecord) _exception.S3Error {
	ret := _m.Called(record)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.MultipartUploadRecord) _exception.S3Error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// CountObjects provides a mock function with given fields: in, out
func (_m *DBAdapter) CountObjects(in *s3.ListObjectsRequest, out *utils.ObjsCountInfo) _exception.S3Error {
	ret := _m.Called(in, out)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.ListObjectsRequest, *utils.ObjsCountInfo) _exception.S3Error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// CreateBucket provides a mock function with given fields: bucket
func (_m *DBAdapter) CreateBucket(bucket *s3.Bucket) _exception.S3Error {
	ret := _m.Called(bucket)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.Bucket) _exception.S3Error); ok {
		r0 = rf(bucket)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// CreateObject provides a mock function with given fields: in
func (_m *DBAdapter) CreateObject(in *s3.Object) _exception.S3Error {
	ret := _m.Called(in)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.Object) _exception.S3Error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// DeleteBucket provides a mock function with given fields: name
func (_m *DBAdapter) DeleteBucket(name string) _exception.S3Error {
	ret := _m.Called(name)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(string) _exception.S3Error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// DeleteBucketLifecycle provides a mock function with given fields: in
func (_m *DBAdapter) DeleteBucketLifecycle(in *s3.DeleteLifecycleInput) _exception.S3Error {
	ret := _m.Called(in)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.DeleteLifecycleInput) _exception.S3Error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// DeleteMultipartUpload provides a mock function with given fields: record
func (_m *DBAdapter) DeleteMultipartUpload(record *s3.MultipartUploadRecord) _exception.S3Error {
	ret := _m.Called(record)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.MultipartUploadRecord) _exception.S3Error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// DeleteObject provides a mock function with given fields: in
func (_m *DBAdapter) DeleteObject(in *s3.DeleteObjectInput) _exception.S3Error {
	ret := _m.Called(in)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.DeleteObjectInput) _exception.S3Error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// GetBucketByName provides a mock function with given fields: name, out
func (_m *DBAdapter) GetBucketByName(name string, out *s3.Bucket) _exception.S3Error {
	ret := _m.Called(name, out)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(string, *s3.Bucket) _exception.S3Error); ok {
		r0 = rf(name, out)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// GetObject provides a mock function with given fields: in, out
func (_m *DBAdapter) GetObject(in *s3.GetObjectInput, out *s3.Object) _exception.S3Error {
	ret := _m.Called(in, out)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.GetObjectInput, *s3.Object) _exception.S3Error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// ListBuckets provides a mock function with given fields: in, out
func (_m *DBAdapter) ListBuckets(in *s3.BaseRequest, out *[]s3.Bucket) _exception.S3Error {
	ret := _m.Called(in, out)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.BaseRequest, *[]s3.Bucket) _exception.S3Error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// ListObjects provides a mock function with given fields: in, out
func (_m *DBAdapter) ListObjects(in *s3.ListObjectsRequest, out *[]s3.Object) _exception.S3Error {
	ret := _m.Called(in, out)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.ListObjectsRequest, *[]s3.Object) _exception.S3Error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// ListUploadRecords provides a mock function with given fields: in, out
func (_m *DBAdapter) ListUploadRecords(in *s3.ListMultipartUploadRequest, out *[]s3.MultipartUploadRecord) _exception.S3Error {
	ret := _m.Called(in, out)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.ListMultipartUploadRequest, *[]s3.MultipartUploadRecord) _exception.S3Error); ok {
		r0 = rf(in, out)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// UpdateBucket provides a mock function with given fields: bucket
func (_m *DBAdapter) UpdateBucket(bucket *s3.Bucket) _exception.S3Error {
	ret := _m.Called(bucket)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.Bucket) _exception.S3Error); ok {
		r0 = rf(bucket)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// UpdateObjMeta provides a mock function with given fields: objKey, bucketName, lastmod, setting
func (_m *DBAdapter) UpdateObjMeta(objKey *string, bucketName *string, lastmod int64, setting map[string]interface{}) _exception.S3Error {
	ret := _m.Called(objKey, bucketName, lastmod, setting)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*string, *string, int64, map[string]interface{}) _exception.S3Error); ok {
		r0 = rf(objKey, bucketName, lastmod, setting)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}

// UpdateObject provides a mock function with given fields: in
func (_m *DBAdapter) UpdateObject(in *s3.Object) _exception.S3Error {
	ret := _m.Called(in)

	var r0 _exception.S3Error
	if rf, ok := ret.Get(0).(func(*s3.Object) _exception.S3Error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Get(0).(_exception.S3Error)
	}

	return r0
}
