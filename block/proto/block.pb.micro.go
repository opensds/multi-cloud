// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: block.proto

package block

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Block service

func NewBlockEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Block service

type BlockService interface {
	ListVolume(ctx context.Context, in *ListVolumeRequest, opts ...client.CallOption) (*ListVolumeResponse, error)
	GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...client.CallOption) (*GetVolumeResponse, error)
	CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...client.CallOption) (*CreateVolumeResponse, error)
	UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...client.CallOption) (*UpdateVolumeResponse, error)
	DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...client.CallOption) (*DeleteVolumeResponse, error)
}

type blockService struct {
	c    client.Client
	name string
}

func NewBlockService(name string, c client.Client) BlockService {
	return &blockService{
		c:    c,
		name: name,
	}
}

func (c *blockService) ListVolume(ctx context.Context, in *ListVolumeRequest, opts ...client.CallOption) (*ListVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "Block.ListVolume", in)
	out := new(ListVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockService) GetVolume(ctx context.Context, in *GetVolumeRequest, opts ...client.CallOption) (*GetVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "Block.GetVolume", in)
	out := new(GetVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockService) CreateVolume(ctx context.Context, in *CreateVolumeRequest, opts ...client.CallOption) (*CreateVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "Block.CreateVolume", in)
	out := new(CreateVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockService) UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, opts ...client.CallOption) (*UpdateVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "Block.UpdateVolume", in)
	out := new(UpdateVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockService) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, opts ...client.CallOption) (*DeleteVolumeResponse, error) {
	req := c.c.NewRequest(c.name, "Block.DeleteVolume", in)
	out := new(DeleteVolumeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Block service

type BlockHandler interface {
	ListVolume(context.Context, *ListVolumeRequest, *ListVolumeResponse) error
	GetVolume(context.Context, *GetVolumeRequest, *GetVolumeResponse) error
	CreateVolume(context.Context, *CreateVolumeRequest, *CreateVolumeResponse) error
	UpdateVolume(context.Context, *UpdateVolumeRequest, *UpdateVolumeResponse) error
	DeleteVolume(context.Context, *DeleteVolumeRequest, *DeleteVolumeResponse) error
}

func RegisterBlockHandler(s server.Server, hdlr BlockHandler, opts ...server.HandlerOption) error {
	type block interface {
		ListVolume(ctx context.Context, in *ListVolumeRequest, out *ListVolumeResponse) error
		GetVolume(ctx context.Context, in *GetVolumeRequest, out *GetVolumeResponse) error
		CreateVolume(ctx context.Context, in *CreateVolumeRequest, out *CreateVolumeResponse) error
		UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, out *UpdateVolumeResponse) error
		DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, out *DeleteVolumeResponse) error
	}
	type Block struct {
		block
	}
	h := &blockHandler{hdlr}
	return s.Handle(s.NewHandler(&Block{h}, opts...))
}

type blockHandler struct {
	BlockHandler
}

func (h *blockHandler) ListVolume(ctx context.Context, in *ListVolumeRequest, out *ListVolumeResponse) error {
	return h.BlockHandler.ListVolume(ctx, in, out)
}

func (h *blockHandler) GetVolume(ctx context.Context, in *GetVolumeRequest, out *GetVolumeResponse) error {
	return h.BlockHandler.GetVolume(ctx, in, out)
}

func (h *blockHandler) CreateVolume(ctx context.Context, in *CreateVolumeRequest, out *CreateVolumeResponse) error {
	return h.BlockHandler.CreateVolume(ctx, in, out)
}

func (h *blockHandler) UpdateVolume(ctx context.Context, in *UpdateVolumeRequest, out *UpdateVolumeResponse) error {
	return h.BlockHandler.UpdateVolume(ctx, in, out)
}

func (h *blockHandler) DeleteVolume(ctx context.Context, in *DeleteVolumeRequest, out *DeleteVolumeResponse) error {
	return h.BlockHandler.DeleteVolume(ctx, in, out)
}
